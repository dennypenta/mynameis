"use strict";(self.webpackChunkmynameis=self.webpackChunkmynameis||[]).push([[578],{1708:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var n=i(5893),s=i(1151);const o={slug:"container-in-container-09",title:"How Treenq builds workload images",authors:["denis"],tags:["software","paas"]},r=void 0,a={permalink:"/mynameis/blog/container-in-container-09",source:"@site/blog/10-container-in-container/index.mdx",title:"How Treenq builds workload images",description:"Build a container inside a rootless conatiner",date:"2025-06-01T21:59:56.000Z",formattedDate:"June 1, 2025",tags:[{label:"software",permalink:"/mynameis/blog/tags/software"},{label:"paas",permalink:"/mynameis/blog/tags/paas"}],readingTime:8.055,hasTruncateMarker:!0,authors:[{name:"Denis",title:"Software Experience Dude",key:"denis"}],frontMatter:{slug:"container-in-container-09",title:"How Treenq builds workload images",authors:["denis"],tags:["software","paas"]},unlisted:!1,nextItem:{title:"Project ideas I keep",permalink:"/mynameis/blog/ideas-09"}},l={authorsImageUrls:[void 0]},d=[{value:"Build a container inside a rootless conatiner",id:"build-a-container-inside-a-rootless-conatiner",level:2},{value:"Grug: docker in docker",id:"grug-docker-in-docker",level:3},{value:"Kaniko: k8s native builder",id:"kaniko-k8s-native-builder",level:3},{value:"Buildah: isolated package",id:"buildah-isolated-package",level:3},{value:"BuildKit: overlooked option",id:"buildkit-overlooked-option",level:3}];function c(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"build-a-container-inside-a-rootless-conatiner",children:"Build a container inside a rootless conatiner"}),"\n",(0,n.jsxs)(t.p,{children:["A PaaS has a very dev friendly use case: when a user just conneects a repository we must build the image from a Dockerfile in the repo.\nWe assume at the beginning a team doesn't have a CI pipeline and wants to share a quick demo to the customers.\nThere are many ways to do it. Let's look at all of them and at the design we chosed for ",(0,n.jsx)(t.a,{href:"https://github.com/treenq/treenq",children:"Treenq"})]}),"\n",(0,n.jsx)(t.h3,{id:"grug-docker-in-docker",children:"Grug: docker in docker"}),"\n",(0,n.jsx)(t.p,{children:"As a straight forward approach we can forward docker host to a container and build it.\nIt has quite a lot of problems:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"dind requirees running in privileged mode: it opens a rabbit hole to a host machine"}),"\n",(0,n.jsx)(t.li,{children:"moreover, it doesn't seem an option to make it rootless"}),"\n",(0,n.jsx)(t.li,{children:"docker daemon is running, it's not free for resources"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Even to get started the user case it didn't seem convinient, it requires configuration to make it possible, so I decided to move to more secure options."}),"\n",(0,n.jsx)(t.h3,{id:"kaniko-k8s-native-builder",children:"Kaniko: k8s native builder"}),"\n",(0,n.jsx)(t.p,{children:"Kaniko is created to solve this problem.\nIt allows setting up an environemnt for a cluster where the workload is built near it's runners, perhaps on different nodes in order to avoid any resource fight.\nThe idea is it spans a new container that builds an image, the container feels great in unprivileged environment and doesn't require a docker daemon."}),"\n",(0,n.jsx)(t.p,{children:"Technically it doesn't create a new namespace, instead it unpacks an image layer and does chroot."}),"\n",(0,n.jsxs)(t.p,{children:["You can even span your registry right in this cluster, like a regular one or ",(0,n.jsx)(t.a,{href:"https://github.com/goharbor/harbor",children:"Harbor"})," and the builds flow is completely isolated from the planet.\nIt like like ",(0,n.jsx)(t.strong,{children:"kaniko -> registry -> k8s workload node"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"In terms of security Kaniko is the winner.\nIt does require root to run, but the abstraction is well done to keep it away."}),"\n",(0,n.jsx)(t.p,{children:"Looks fancy, but has a couple restrictions:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"it buidls containers only inside a Kubernetes cluster, it works in k8s, k3s (which we use for e2e tests) and perhaps some more."}),"\n",(0,n.jsx)(t.li,{children:"it has no more capabilities, if I need to inspect an image."}),"\n",(0,n.jsx)(t.li,{children:"it's not able to build windows images"}),"\n",(0,n.jsx)(t.li,{children:"build time performance is slightly lower"}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["For instance, I want to rollback, I want it real quick, so before launching a build job I want to look if the image is in the registry.\nFor that purpose I must use skopeo or another tool to talk to a registry.\nNot really a big deal.\nPerhaps, one day Treenq will need ",(0,n.jsx)(t.a,{href:"https://github.com/containers/skopeo",children:"Skopeo"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"Looking back it looks a good option and most likely I would say it's worth trying it.\nBut I thought it's very important to have a capability to run builds outside of a cluster, may be even on a isoalted VM, which is not really smart requirement I guess.\nAlso, the complexity to set it up didn't look easy enough, I have to span a k8s resource, make a ServiceAccount for it and many more to start building + adding inspection API near by."}),"\n",(0,n.jsx)(t.p,{children:"On top of that, recently, Kaniko stepped down right into arhive."}),"\n",(0,n.jsx)(t.h3,{id:"buildah-isolated-package",children:"Buildah: isolated package"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://github.com/containers/podman",children:"Podman"}),", a Docker alternative, has a way cleaner opensource relation and how they structure the packages and repositories.\nPodman has a designated module, ",(0,n.jsx)(t.a,{href:"https://github.com/containers/buildah",children:"Buildah"}),", which is used exactly for building images.\nIt requires no priovileges, root, daemon, nothing (technically speaking, but there is a price for it)."]}),"\n",(0,n.jsx)(t.p,{children:"It doesn't require a daemon to run.\nPackage is written in Go, therefore I can embed it right into the service instead of adding a syscall."}),"\n",(0,n.jsx)(t.p,{children:"DISCLAIMER: I understand I use undocumented API of the package and it can hurt it. If it happens I can freeze the version, and then either the project fulfills the graveyard or it migrates to buildkit."}),"\n",(0,n.jsxs)(t.p,{children:["First step is to understand how to run buidlah in a container.\nThere is an official ",(0,n.jsx)(t.a,{href:"https://hub.docker.com/r/buildah/buildah",children:"image"})," based on Fedora, but I want my app run at least in Ubuntu.\nBetter in alpine/scratch ofc, but it doesn't seem viable."]}),"\n",(0,n.jsxs)(t.p,{children:["There are a some guides on ",(0,n.jsx)(t.a,{href:"https://developers.redhat.com/blog/2019/08/14/best-practices-for-running-buildah-in-a-container",children:"how to run buildah in a container"})," and ",(0,n.jsx)(t.a,{href:"https://opensource.com/article/19/3/tips-tricks-rootless-buildah",children:"in privileged environment"}),", so I can slowly transform this information to prepare Ubuntu image.\nHere is what I got ",(0,n.jsx)(t.a,{href:"https://github.com/treenq/treenq/blob/main/Dockerfile",children:"eventually"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"Ok, we can build, next step I want to build a small image from Go application."}),"\n",(0,n.jsxs)(t.p,{children:["There is a ",(0,n.jsx)(t.a,{href:"https://github.com/containers/buildah/blob/main/docs/tutorials/04-include-in-your-build-tool.md",children:"guilde"})," showing how programmatically execute dockerfile steps (run, copy, etc.), but it's not what we need.\nWe simply need to run ",(0,n.jsx)(t.code,{children:"buildah build"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"At this point I have to dig the source code to understand what's happening.\nJumping right inside the build command in the source code we find there is a storage resource is required to start and we can execute the build"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-go",children:"\tbuildStoreOptions, _ := storage.DefaultStoreOptions()\n\tbuildStore, _ := storage.GetStore(buildStoreOptions)\n"})}),"\n",(0,n.jsx)(t.p,{children:"And next step we can start build:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-go",children:"\tid, _, err := imagebuildah.BuildDockerfiles(ctx, buildStore, define.BuildOptions{\n\t\tContextDirectory: args.Path,\n\t\tRegistry:         a.registry,\n\t\tOutput:           args.Name,\n\t\tOut:              out,\n\t\tErr:              errOut,\n\t\tReportWriter:     reportOut,\n\t\tIgnoreFile:     dockerignorePath,\n\t\tAdditionalTags: []string{image.FullPath()},\n\t}, args.Dockerfile)\n"})}),"\n",(0,n.jsx)(t.p,{children:"To push the image we need to get a reference to this image in our store and prepare system context: registry authentication, tls flags, certs."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-go",children:'\tstoreRef, _ := alltransports.ParseImageName("docker://" + image.FullPath())\n\tsystemContext, := &types.SystemContext{\n\t\tDockerCertPath:              a.registryCertDir,\n\t\tDockerInsecureSkipTLSVerify: types.NewOptionalBool(!a.registryTLSVerify),\n\t\tDockerAuthConfig:            &types.DockerAuthConfig{\n\t\t\tIdentityToken: a.registryToken,\n\t\t},\n\t} \n\t_, _, err = buildah.Push(ctx, id, storeRef, buildah.PushOptions{\n\t\tStore:         a.store,\n\t\tSystemContext: systemContext,\n\t})\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Full version of this module is ",(0,n.jsx)(t.a,{href:"https://github.com/treenq/treenq/blob/main/src/repo/artifacts/docker.go",children:"here"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"One important detail: first lines of your main function must be:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-go",children:"\tif buildah.InitReexec() {\n\t\treturn\n\t}\n\tunshare.MaybeReexecUsingUserNamespace(false)\n"})}),"\n",(0,n.jsx)(t.p,{children:"It matters to act Buildah as root without being real rool.\nIt locks the OS thread, prepares uid/gid mapping and reexec as a new user in a new namespace.\nSo, softly speaking, it's not ideal to run this code inside the application code."}),"\n",(0,n.jsx)(t.p,{children:"The best design would be to have the application code isolated from pool of builders. Builders can receive the build tasks and still execute it inside a Go app in order to being able to extend he capabilities.\nThis design allows me to extend options to build images: In a similar manner I can embed buildpacks to build simpler apps without a Dockerfile."}),"\n",(0,n.jsx)(t.p,{children:"Buildah, unfortunately, also has a few caveats and it's a little behined of docker."}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["For instance buildah can't inject variables/secrets ",(0,n.jsx)(t.a,{href:"https://github.com/containers/buildah/issues/5892",children:"on RUN command"})," while docker can."]}),"\n",(0,n.jsxs)(t.li,{children:["Or it can't detect ",(0,n.jsx)(t.a,{href:"https://github.com/containers/buildah/issues/5408",children:"variables in images"})]}),"\n",(0,n.jsx)(t.li,{children:"Also, runniong it unprivileged is quite tricky and it requires specific arguments for container and specific build of the image itself.\nThe domain is huge to learn, different backends, storages drivers and so on."}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["From this ",(0,n.jsx)(t.a,{href:"https://github.com/containers/buildah/issues/2554",children:"issue"})," I learned vfs storage driver copies the entire sublayer on every layer.\nSo it's better to use overlayfs, it requires /dev/fuse to run in non privileged container."]}),"\n",(0,n.jsxs)(t.p,{children:["As a bonus, it might be cool to put it inside alpine, but not sure it's viable at all.\nPutting a cgo app itself requires some ",(0,n.jsx)(t.a,{href:"https://baicai.xlog.app/docker_golang_alpine_cgo_build?locale=en",children:"dance"})," for it."]}),"\n",(0,n.jsx)(t.h3,{id:"buildkit-overlooked-option",children:"BuildKit: overlooked option"}),"\n",(0,n.jsx)(t.p,{children:"What if docker could get rid of priviileged mode?"}),"\n",(0,n.jsx)(t.p,{children:"Buildx (BuildKit) is a module of docker (or moby?) that's responsible specifically for building iamges."}),"\n",(0,n.jsx)(t.p,{children:"BuildKit still has a daemon and it requires a privileged mode either."}),"\n",(0,n.jsxs)(t.p,{children:["However, we can run fake root using ",(0,n.jsx)(t.a,{href:"https://github.com/rootless-containers/rootlesskit/",children:"RootlessKit"}),".\nWe can build our flow in the following way:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"run a daemon"}),"\n",(0,n.jsx)(t.li,{children:"run buildctl to start build"}),"\n",(0,n.jsx)(t.li,{children:"when we are done we close the daemon"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"RootlessKit requires turning off apparmor and seccomp, because the default profile doesn't allow spawning new namespaces.\nAlso, add a few linux capabilities like SETUID, SETGUID and fake root users removing the option no-new-privileges."}),"\n",(0,n.jsx)(t.p,{children:"It seems quite secure, but has a few constraints:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"requires support explicit uid and gid which is not fine and might be annoyign"}),"\n",(0,n.jsx)(t.li,{children:"requires supporting a designated pool of build machines, which is actually makes sence in terms of designing a PaaS, but makes it a way complicated to start"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"In case of buildah it required me to run the build in the same application.\nIn order to scale it well I have to build network transport and mount volumes between them, which makes it quite complicated to setup."}),"\n",(0,n.jsx)(t.p,{children:"Buildkit provides its capabilities out of the box. It makes its API a bit  harder to learn, since it's not documented well and perhaps not supposed to be used like that."}),"\n",(0,n.jsx)(t.p,{children:"Buildkit brings to main modules to the table:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"buildkitd - a daemon to serve the builds, it may expose a unix socker to tcp connection"}),"\n",(0,n.jsx)(t.li,{children:"buildctl - the actual buildkit client"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Now it requires to to setup additional container buildkitd and write a client part inside my Go service.\nAs a benefit I get rid of building images and buildkit dependencies."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:'  buildkit:\n    image: moby/buildkit:v0.23.0\n    privileged: true\n    container_name: buildkit\n    ports:\n      - "1234:1234"\n    volumes:\n      - ./buildkit/entrypoint.sh:/entrypoint.sh\n      - ./buildkit/buildkitd.toml:/etc/buildkit/buildkitd.toml\n      - ./registry/certs:/certs\n      - ./buildkit/certs:/buildkit\n    entrypoint: ["/entrypoint.sh"]\n    healthcheck:\n      test: ["CMD-SHELL", "buildctl --addr tcp://localhost:1234 debug workers"]\n      interval: 5s\n      timeout: 30s\n      retries: 3\n    extra_hosts:\n      - "localhost:host-gateway"\n'})}),"\n",(0,n.jsx)(t.p,{children:"entrypoint specifies the arguments to run, it overrides the default address to tcp.\nbuildkitd mostly contains registry and service access and its TLS to test and support self signed certs flow.\nBuildkit not only builds images, but also pushes them, therefore it requires access to the registry. Since my service has acces to the local registry as to localhost I want my buildkit access it on localhost too, therefore I define extra_hosts there.\nWithout the extra_hosts config registry will be available on registry host as define in the rest of the docker-compose.yaml."}),"\n",(0,n.jsxs)(t.p,{children:["Full example is here: ",(0,n.jsx)(t.a,{href:"https://github.com/treenq/treenq/blob/main/src/repo/artifacts/docker.go",children:"https://github.com/treenq/treenq/blob/main/src/repo/artifacts/docker.go"})]}),"\n",(0,n.jsx)(t.p,{children:"docker-compose is in the root of the repo."}),"\n",(0,n.jsxs)(t.p,{children:["Final design of the platform is the following:\n",(0,n.jsx)(t.img,{alt:"img",src:i(409).Z+"",width:"1938",height:"1279"})]}),"\n",(0,n.jsx)(t.p,{children:"Happy to answer your questions below in the comments"})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},409:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/design-2f0fa17a45b1b84f1404c7ee75031b27.svg"},1151:(e,t,i)=>{i.d(t,{Z:()=>a,a:()=>r});var n=i(7294);const s={},o=n.createContext(s);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);