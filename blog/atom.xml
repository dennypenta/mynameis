<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dennypenta.github.io/mynameis/blog</id>
    <title>Denny's blog Blog</title>
    <updated>2024-09-19T20:45:05.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dennypenta.github.io/mynameis/blog"/>
    <subtitle>Denny's blog Blog</subtitle>
    <icon>https://dennypenta.github.io/mynameis/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Web API Design: A Simplified Approach]]></title>
        <id>https://dennypenta.github.io/mynameis/blog/api-design</id>
        <link href="https://dennypenta.github.io/mynameis/blog/api-design"/>
        <updated>2024-09-19T20:45:05.000Z</updated>
        <summary type="html"><![CDATA[Note: This page won’t teach you how to design an API from scratch, but it will give you insights into how I recently designed one while developing my PaaS.]]></summary>
        <content type="html"><![CDATA[<p><strong>Note</strong>: This page won’t teach you how to design an API from scratch, but it will give you insights into how I recently designed one while developing my <a href="https://github.com/treenq/treenq" target="_blank" rel="noopener noreferrer">PaaS</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="preface">Preface<a href="https://dennypenta.github.io/mynameis/blog/api-design#preface" class="hash-link" aria-label="Direct link to Preface" title="Direct link to Preface">​</a></h2>
<p>Feel free to skip to the next section if you want to avoid the backstory.</p>
<p>After working with various communication protocols (e.g., web form-data, REST, JSON-RPC 2.0), I’ve realized that many of them aim to cover a wide range of use cases. This broad focus introduces a lot of complexity:</p>
<ul>
<li>Network implementations require special handling, such as decoding domain-level errors into transport error codes and messages.</li>
<li>Encoding and decoding messages require marshalling domain models into protocol-specific formats.</li>
<li>Protocols like REST involve lengthy discussions about naming conventions and URL structures.</li>
<li>Some protocols, like JSON-RPC, demand custom solutions, such as middleware for handling requests.</li>
</ul>
<p>These factors complicate implementations and slow down team agreements.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-grpc-shift">The gRPC Shift<a href="https://dennypenta.github.io/mynameis/blog/api-design#the-grpc-shift" class="hash-link" aria-label="Direct link to The gRPC Shift" title="Direct link to The gRPC Shift">​</a></h2>
<p>When I started working with gRPC, it introduced some important improvements:</p>
<ul>
<li>Models are generated automatically.</li>
<li>Service interfaces are provided and generated.</li>
<li>Clients are generated, allowing you to focus on just creating requests.</li>
<li>Error codes are simplified, reducing them from hundreds to around 15 (which is still more than needed, but we’ll get to that).</li>
<li>The error format is predefined, so you don’t have to design it—just reuse <a href="https://cloud.google.com/apis/design/errors" target="_blank" rel="noopener noreferrer">the model</a></li>
</ul>
<p>And I liked. I don't know who didn't.</p>
<p>I loved it. Most people who use gRPC feel the same.
However, gRPC doesn’t naturally align with web browsers due to its reliance on HTTP/2, often necessitating additional layers to adapt to HTTP/1.1.
Still, browser compatibility remains a common requirement.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="bringing-grpc-ideas-to-the-web">Bringing gRPC Ideas to the Web<a href="https://dennypenta.github.io/mynameis/blog/api-design#bringing-grpc-ideas-to-the-web" class="hash-link" aria-label="Direct link to Bringing gRPC Ideas to the Web" title="Direct link to Bringing gRPC Ideas to the Web">​</a></h2>
<p>This made me think: what can we adopt from gRPC for web APIs? The most obvious feature is <strong>code generation</strong>.</p>
<p>Swagger attempts client generation but introduces its own challenges:</p>
<ol>
<li>Swagger has too many plugins, requires specific formats, and its "standard" is fragmented. Many web renderers are incompatible with each other. For example, Apiary’s requirements may contradict code generation.</li>
<li>Swagger focuses on defining documentation instead of the API itself, adding complexity.</li>
</ol>
<p>The I discovered <a href="https://trpc.io/docs/quickstart" target="_blank" rel="noopener noreferrer">tRPC</a>, which offered many things I’d been hoping for—network handling as a natural consequence of defining models.
The catch? It’s limited to JavaScript.</p>
<p>So, I decided to design my own API approach.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="my-api-design-principles">My API Design Principles<a href="https://dennypenta.github.io/mynameis/blog/api-design#my-api-design-principles" class="hash-link" aria-label="Direct link to My API Design Principles" title="Direct link to My API Design Principles">​</a></h2>
<p>Here are the guiding principles I followed:</p>
<ul>
<li>It must be built on top of HTTP to support the web.</li>
<li>No URL queries, forms, or arguments in the path—these overcomplicate things. Most people don’t even know that URL queries are essentially <a href="https://en.wikipedia.org/wiki/Multimap" target="_blank" rel="noopener noreferrer">multimaps</a>, which leads to more bugs.</li>
<li>Every API call uses only POST. The payload is always in the body, and for simplicity, in my case, it’s JSON.</li>
<li>The procedure naming follows the same conventions we use in code. For instance, instead of REST’s <code>/users/{id}/wallet</code>, I use <code>/getUserWallet</code>.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-does-this-achieve">What Does This Achieve?<a href="https://dennypenta.github.io/mynameis/blog/api-design#what-does-this-achieve" class="hash-link" aria-label="Direct link to What Does This Achieve?" title="Direct link to What Does This Achieve?">​</a></h2>
<ul>
<li>I only define the models I need — no extra complexity.</li>
<li>Optionally, I can add descriptions to make the generated documentation more talkative.</li>
<li>From the defined router, I can generate both the client code and the API specification (including Swagger).</li>
<li>The code generation process is simplified: a single - word URL, consistent HTTP method, and uniform marshalling strategy make everything easy to implement and maintain.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="error-handling">Error Handling<a href="https://dennypenta.github.io/mynameis/blog/api-design#error-handling" class="hash-link" aria-label="Direct link to Error Handling" title="Direct link to Error Handling">​</a></h2>
<p>Error handling is a crucial part of any API design, and the model needs to be flexible enough to cover a wide range of scenarios.
Based on my experience, a simple yet effective error model looks like this:</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> Error </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  Code    </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  Message </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  Meta    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain">any</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li><strong>Code</strong>: This holds a unique value that identifies the specific issue.
It helps narrow down the location of the problem in the code and quickly leads developers to the exact line or area where the error occurred. Additionally, it provides clear guidance to users about the expected behavior or how to resolve the issue.</li>
<li><strong>Message</strong>: The message field can serve a dual purpose:<!-- -->
<ol>
<li><strong>UserMessage</strong>: This is a user-friendly message that can be translated into different languages on the server side. It's meant to be shown in the user interface to guide the user.</li>
<li><strong>DevMessage</strong>: This contains a technical explanation intended for developers or logs. It explains what went wrong, why it happened, and what actions can be taken to resolve it.
While you could use a single string for both, in complex applications with internationalization (i18n) needs, separating them into two distinct lines would help.</li>
</ol>
</li>
<li><strong>Meta</strong>: This is a flexible map that can contain any additional context or metadata about the error. For example, if you're validating a form with multiple fields, the Meta map can list which fields failed validation and why.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="example-error-response">Example Error Response<a href="https://dennypenta.github.io/mynameis/blog/api-design#example-error-response" class="hash-link" aria-label="Direct link to Example Error Response" title="Direct link to Example Error Response">​</a></h3>
<p>Here’s an example of how this error model might be used in a real-world scenario. Suppose a user submits a tax form with several invalid fields. The API can return an error response like this:</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  Code</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"TAX_FORM_INVALID"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  Meta</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain">any</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">"tax_class"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"expected a number between 1 and 4"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">"house_number"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"must be a number"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In this example:</p>
<ul>
<li>The <strong>Code</strong> is <code>"TAX_FORM_INVALID"</code>, which indicates a validation failure specific to the tax form.</li>
<li>The <strong>Meta</strong> map provides detailed feedback on specific fields (<code>tax_class</code>, <code>house_number</code>) that need attention, making it easier for the user to correct their input.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="error-handling-in-api-handlers">Error Handling in API Handlers<a href="https://dennypenta.github.io/mynameis/blog/api-design#error-handling-in-api-handlers" class="hash-link" aria-label="Direct link to Error Handling in API Handlers" title="Direct link to Error Handling in API Handlers">​</a></h3>
<p>In my API, the handler interface is designed to consistently return errors using this model.
This ensures that all errors adhere to a common structure, simplifying error handling on both the client and server side.</p>
<p>For instance, a typical API handler might look like this:</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token function" style="color:rgb(80, 250, 123)">GetProfile</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ctx context</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Context</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">_</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">GetProfileResponse</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain">Error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here, instead of returning a plain error, the handler returns a pointer to the *Error type.
This approach ensures that any error returned strictly follows the predefined error format.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="example-from-my-application">Example from My Application<a href="https://dennypenta.github.io/mynameis/blog/api-design#example-from-my-application" class="hash-link" aria-label="Direct link to Example from My Application" title="Direct link to Example from My Application">​</a></h3>
<p>Here’s a practical example of how I’ve implemented this in my app:</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">package</span><span class="token plain"> domain</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">"context"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">"github.com/treenq/treenq/pkg/vel"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> GetProfileResponse </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Email    </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">`json:"email"`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Username </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">`json:"username"`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Name     </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">`json:"name"`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">h </span><span class="token operator">*</span><span class="token plain">Handler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">GetProfile</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ctx context</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Context</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">_</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">GetProfileResponse</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain">vel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    profile </span><span class="token operator">:=</span><span class="token plain"> h</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">authProfiler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">GetProfile</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">ctx</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> GetProfileResponse</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Email</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">    profile</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Email</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Username</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> profile</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Username</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">     profile</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In this code:</p>
<ul>
<li>The <code>GetProfile</code> function fetches the user profile and returns it as a <code>GetProfileResponse</code>.</li>
<li>The second return value is <code>*Error</code> instead of a generic <code>error</code>, making it clear that the function follows the structured error format.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-use-a-custom-error-type">Why Use a Custom Error Type?<a href="https://dennypenta.github.io/mynameis/blog/api-design#why-use-a-custom-error-type" class="hash-link" aria-label="Direct link to Why Use a Custom Error Type?" title="Direct link to Why Use a Custom Error Type?">​</a></h2>
<p>By using a custom <code>Error</code> type instead of the standard <code>error</code>, we enforce consistency across the API.
The error itself still implements Go’s built-in <code>error</code> interface, allowing it to work seamlessly with existing Go error-handling patterns.
However, the benefit is that every error now carries additional structured information, like the error code and metadata, making it easier to debug and handle errors programmatically.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="epiloge">Epiloge<a href="https://dennypenta.github.io/mynameis/blog/api-design#epiloge" class="hash-link" aria-label="Direct link to Epiloge" title="Direct link to Epiloge">​</a></h2>
<p>I ended up building a "framework" in Go on top of net/http that is able to generate clients for any language.</p>
<p>You can check it out <a href="https://github.com/treenq/treenq/blob/main/pkg/vel/router.go" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p>I don’t recommend using it as-is — it’s better to copy and adapt it for your own needs.</p>]]></content>
        <author>
            <name>Denis</name>
        </author>
        <category label="software" term="software"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[PaaS devlog |#0]]></title>
        <id>https://dennypenta.github.io/mynameis/blog/tq-devlog-0</id>
        <link href="https://dennypenta.github.io/mynameis/blog/tq-devlog-0"/>
        <updated>2024-09-02T20:12:28.000Z</updated>
        <summary type="html"><![CDATA[Devlog |#0]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="devlog-0">Devlog |#0<a href="https://dennypenta.github.io/mynameis/blog/tq-devlog-0#devlog-0" class="hash-link" aria-label="Direct link to Devlog |#0" title="Direct link to Devlog |#0">​</a></h2>
<p>Today I want to share with your my first steps of creating new project.
For a long time I've wanted created something cool, really meaninful, and after all I step into my idea: Platform as a service.</p>
<p>The main tech stack has beeen defined: Go for a main backend, perhaps JavaScript for cdk integration.
All the infra will be used from a well known cloud providers (not aws ofc, no clue who can understand how to user it).
First iteration will not such words as a frontend, ui, design. Ofc I want to make it, but only future history can judge me.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-problem">The problem<a href="https://dennypenta.github.io/mynameis/blog/tq-devlog-0#the-problem" class="hash-link" aria-label="Direct link to The problem" title="Direct link to The problem">​</a></h3>
<p>The technical problem exists, it's fun to figure out.
But no the main one. The biggest fight Im gonna accept is <strong>procrastination</strong>. Im such a person who pushes further all the tasks very often. I just have little to do with time discipline. That's what will stop me from the progress.
So the easiest way to move progress away - do whatever, but not the progress.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-planing">The planing<a href="https://dennypenta.github.io/mynameis/blog/tq-devlog-0#the-planing" class="hash-link" aria-label="Direct link to The planing" title="Direct link to The planing">​</a></h3>
<p>So I decided to plan everything and understand how big the actual project is gonna be.
So I start speaking with GPT in order to express my mind, kinda talking to a duck.
Instead of asking what I should do I explained my plan and asked to ask <strong>more questions</strong> so it could help me to clarify the technical solution and the plan.</p>
<p><img loading="lazy" alt="img" src="https://dennypenta.github.io/mynameis/assets/images/gpt-b6084e0c9c75c7a74f335fb999dde350.png" width="817" height="1036" class="img_ev3q"></p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary><p>Here you can find a prompt I used</p></summary><div><div class="collapsibleContent_i85q"><p>I want to develop a platform like digitalocean app, vercel, render, fly.io, heroku, etc. My value is the following: I give observability with 0 code changes, and a localdev opportunity with connecting to a cloud environment, for instance a request comes from a frontend app on staging to my backend app locally so I could intercept it and make my laptop appear kinda in the cloud. It's a multitenant project. There are 2 paths: kubernetes and a custom architecture. To build a custom architecture the app must be on a few virtual machines, a load balancer on top including firewall. The challenge: ask me necessary questions so we could make a right decision. I have to highlight, we build a users' environment, not the product architecture I will create in order to reproduce the given environment, so we need to decide that would fit me and users better.</p></div></div></details>
<p>Initially I thought I will do it providing a user set of virtual machines connected under VPC, putting a load balancer on top, back to 2000. I thought it will make it cheaper and some tools just easier to implement.</p>
<p>Chatting to GPT I realized - Kubernetes will provide it a way quicker, most of the stuff is just ready to go like network policies, load balancing, SSL, deployment/rollback, health monitoring, resources observability, Istio adoption. Istio is very useful for observability and local first development, it became a new word today - <strong>remocal</strong>.</p>
<p>When stepped into the planning I decided to make it even longer.
I wanted to researched all the kanban boards, unresistable.
I used to use Trello and it was ok, but using api in power-ups boundaries sucks. Not really somethign I need right now though.</p>
<p>I tried Cluckup, it's a laggish joke, even worse than Jira to make you feel you are already enterprise.
I tried Asana and saw 0 difference with Trello, I spent about 2 minutes to confirm it and exist.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-ugly-thing">The ugly thing<a href="https://dennypenta.github.io/mynameis/blog/tq-devlog-0#the-ugly-thing" class="hash-link" aria-label="Direct link to The ugly thing" title="Direct link to The ugly thing">​</a></h3>
<p>In the end I found Linear.
To be fair it looked ugly, the design is equal to supabase: fonts, buttons.</p>
<p>A few minutes later I started catching.
Keyboard first design - that's what I buy.</p>
<p>So I read Linear Method, the framework they apply internally. It was hard to accept it, I think older I get more conservatibe I become, but I dig it anyway.
The basic element is an issue. It might have sub-issues. And they might have.
They can be collected in a project.</p>
<p>There are bunch of other staff I don't use, but I will share it below.</p>
<ul>
<li>Cycle - like a sprint, hate it.</li>
<li>Triage - inbox, it's a boss feature in my opinion, you can aggregate communication channels in a single place, then an on-call person can carry them, create issues or remove.</li>
<li>Initiative - collection of the projects, they can be presented as a time line or a strategy decision, or even a roadmap on a timeline.</li>
</ul>
<p>As a result I cooked quite a few cards (48 projects in a backlog 😱️️️️️️).</p>
<p><img loading="lazy" alt="img" src="https://dennypenta.github.io/mynameis/assets/images/few-a8829c782e27ba5f7f88f18ced787cf4.png" width="1632" height="1121" class="img_ev3q"></p>
<p>Thank you for reading, come here and see what's gonna be in the end.
Repository is here: <a href="http://github.com/treenq/treenq" target="_blank" rel="noopener noreferrer">http://github.com/treenq/treenq</a></p>]]></content>
        <author>
            <name>Denis</name>
        </author>
        <category label="software" term="software"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Backend Guy Ventures into Game Development]]></title>
        <id>https://dennypenta.github.io/mynameis/blog/do-gamedev</id>
        <link href="https://dennypenta.github.io/mynameis/blog/do-gamedev"/>
        <updated>2024-09-02T18:32:54.000Z</updated>
        <summary type="html"><![CDATA[In order to be engaged one explores different areas and looks for unknown software area.]]></summary>
        <content type="html"><![CDATA[<p>In order to be engaged one explores different areas and looks for unknown software area.</p>
<p>Here we look at the gamedev in 2024 from experience in server side software.</p>
<p>In software development, it's common to explore new domains to stay engaged.
Whether it's for a change of pace or to push personal boundaries, exploring the unknown can lead to fancy adventures in software.
This page will share my journey as a backend developer diving into the game development in 2024.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="why-gamedev">Why Gamedev?<a href="https://dennypenta.github.io/mynameis/blog/do-gamedev#why-gamedev" class="hash-link" aria-label="Direct link to Why Gamedev?" title="Direct link to Why Gamedev?">​</a></h4>
<p>99% of programmes came here to make a game.
Either did I.</p>
<p>From a young age, I was captivated by two genres: strategy games and action RPGs.
My first PC came preloaded with classics like Red Alert 2, Heroes of Might and Magic 3, and Diablo 2.
The simple yet addictive gameplay—click, move, destroy, enjoy — cemented my love for these genres.
Over the years, I’ve played many iconic RTS games like Warcraft 3 and Starcraft 2 (and still do occasionally).
But I realized that Starcraft 2 and similar games leaned more towards real-time execution rather than strategic depth.</p>
<p>So I decided to make my own game with the strategy and decision making take the center stage.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="choosing-the-game-engine">Choosing the Game Engine<a href="https://dennypenta.github.io/mynameis/blog/do-gamedev#choosing-the-game-engine" class="hash-link" aria-label="Direct link to Choosing the Game Engine" title="Direct link to Choosing the Game Engine">​</a></h4>
<p>There are numerous options out there—Defold, RPG Maker, GameMaker, Construct, to name a few.</p>
<p>But I focused on the big three that are free to start with, offer extensive flexibility, and have been tested by major projects: Unreal Engine, Unity, and Godot.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="unreal-engine-a-mixed-bag-of-power-and-complexity">Unreal Engine: A Mixed Bag of Power and Complexity<a href="https://dennypenta.github.io/mynameis/blog/do-gamedev#unreal-engine-a-mixed-bag-of-power-and-complexity" class="hash-link" aria-label="Direct link to Unreal Engine: A Mixed Bag of Power and Complexity" title="Direct link to Unreal Engine: A Mixed Bag of Power and Complexity">​</a></h4>
<p>I chose to start with Unreal Engine. It has a large community, though not the largest. Everything Unity offers in its asset store, Unreal has an equivalent. The engine supports C++ for low-level programming and Blueprints (a visual scripting language) for level design, though you can use either approach.</p>
<p>Installing the engine is a hassle. You need to first install the Epic Games Launcher and then download the 55GB engine itself, which can be a chore if your disk space is limited.</p>
<p>After setting up a blank project, I was impressed by the vast flexibility Unreal offers. You get all the benefits of C++—dynamic dependency injection, custom components, and more.. But it adds complexity.</p>
<ol>
<li>Compiliation time. It exists. Not just exists like a couple blinks 5-10 seconds, it takes a lot of time to build a single class to start using it in the project.</li>
<li>Code complexity. Write header files, manual memory management. Good package manager doesn't exist in 2024, now I understand why they love Rust so much.</li>
<li>Poor mac support. No comments, even the interface of top bar menu is different, I was struggling to find editor settings according to the documentation, and every question is like that.</li>
</ol>
<p>I would recommend such engine for people who likes waiting, c++ and want to make a beatiful scenes with nice action.
I also have to note that engine is open source and owned by a technical guy and people who actually make games. I would stop there if I liked waiting and c++.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="unity-the-industry-standard">Unity: The Industry Standard.<a href="https://dennypenta.github.io/mynameis/blog/do-gamedev#unity-the-industry-standard" class="hash-link" aria-label="Direct link to Unity: The Industry Standard." title="Direct link to Unity: The Industry Standard.">​</a></h4>
<p>Next up was Unity, the most popular game engine out there.
Unity has a vast ecosystem, with advanced features like rendering, post-processing, and easy shader creation.
It’s backed by a huge asset store, which should theoretically make development easier.
C# - Im not a big fun, but it's compilable, therefore type safe, seems good.</p>
<p>A basic abstraction is an object. An object has compenents to manage what is it, it might be a script to move it, a mesh to render a tree, a colission not to pass through the tree, sound to play as tree leafs on the wind and so on.
Seems quite simple.</p>
<p>But when I approached a real problem there are plenty of weird things.</p>
<ol>
<li>Unity has three different render pipelines, which aren’t compatible with each other. The oldest one is being deprecated, meaning half the assets in the store may soon be obsolete.</li>
<li>Asset store is a garbage. I tried several camera controllers, and only one partially met my needs. I had to patch it to double its functionality, which felt like reinventing the wheel.</li>
</ol>
<p>We all remember the Unity pricing drama. It has a closed-source codebase, and now there’s a tracker that counts installations to generate more revenue for shareholders.
This has led to a lot of half-baked features and outdated documentation, which can make the engine feel unstable.</p>
<p>Unity is still a solid choice, but in 2024, it feels like the engine is in a weird transitional state.
The documentation isn’t as up-to-date as it should be, and the engine itself seems to be in a half-finished state.
I might revisit it in 2025 when Unity 6 is released.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="godot-unknown-creature-in-the-sea">Godot: Unknown creature in the Sea.<a href="https://dennypenta.github.io/mynameis/blog/do-gamedev#godot-unknown-creature-in-the-sea" class="hash-link" aria-label="Direct link to Godot: Unknown creature in the Sea." title="Direct link to Godot: Unknown creature in the Sea.">​</a></h4>
<p>Finally, I turned to Godot, an engine I initially underestimated.
Known for its strong 2D capabilities, Godot seemed lacking in 3D support.
Its physics engine was also rumored to be subpar.</p>
<p>So I start doing a 3D.
First I found that asset library is poor, camera controller only for Godot 3 (previous release) and it makes no sense to use Godot 3 in 2024.</p>
<p>What I actually see in progress.
0. Godot’s installation bundle is just 150MB. It has a negligible memory footprint and can run smoothly even on modest hardware. Coming from Unity, this was a breath of fresh air.</p>
<ol>
<li>Godot’s editor can be extended in a similar manner to Unity, allowing you to add new UI elements and dynamically instantiate new components.</li>
<li>The asset library isn’t a store but a repository where everything is distributed for free. Since Godot is open-source, I doubt any significant part of it will go paid, unlike Unity and Unreal, where quality assets often come with a price tag.</li>
<li>Physics engine implementation can be replaced with jolt easy-peasy and works very well.</li>
<li>The same abstractions, the same component building, but not an object has component, rather a scene (actually a node) has nodes (the others to implement actual behavior of the node).</li>
<li>Exporting is just a button click. I managed to build a project for windows in Mac, it's so good, haven't had such smooth exprerience.</li>
</ol>
<p>It was surprisingly easy to understand the basics, the nodes design, the event bus system, for a backend guy it's perfect to start making a real game.</p>
<p>GDScript can fail in runtime, not the best, but you can use C# for the sake of compilte time failure.</p>
<p>And I know, the community is smaller, it will be developed slower, true. But I care about me today, not the community.</p>
<p>I initially planned to give Unity a fair shot, spending a week with both engines.
But after just two days with Godot, I was progressing so much faster that I decided it wasn’t worth the time to continue with Unity.
Godot’s lower entry barrier and faster development pace made it the clear choice for me.</p>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="i-want-to-finish-simpler">I want to finish simpler.<a href="https://dennypenta.github.io/mynameis/blog/do-gamedev#i-want-to-finish-simpler" class="hash-link" aria-label="Direct link to I want to finish simpler." title="Direct link to I want to finish simpler.">​</a></h5>
<p>In the end, the best engine is the one that aligns with your needs and preferences.
Remember, Blender was once considered a niche tool while everyone used 3D Max, and now Blender is the industry standard.
Firebase was just a “base,” and today we have Supabase, Pocketbase and many others.</p>
<p>The landscape of game development is always changing.
What matters most is finding the tool that helps you bring your vision to life, not what the industry standard is.
For me, that tool is Godot.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="lessons">Lessons<a href="https://dennypenta.github.io/mynameis/blog/do-gamedev#lessons" class="hash-link" aria-label="Direct link to Lessons" title="Direct link to Lessons">​</a></h3>
<p>Spoiler, no, I didn't finish a game, I learned the gamedev abstractions and played with the engines a bit and I enjoyed it.
And it's fine, I had good time and wish everyone to find a toy you can spend some time on and make you engaged.</p>]]></content>
        <author>
            <name>Denis</name>
        </author>
        <category label="software" term="software"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[250mb json in a 40mb service limit]]></title>
        <id>https://dennypenta.github.io/mynameis/blog/big-json</id>
        <link href="https://dennypenta.github.io/mynameis/blog/big-json"/>
        <updated>2024-05-26T15:48:12.000Z</updated>
        <summary type="html"><![CDATA[This article has been created to remind us of one simple thing: HTTP is a stream.]]></summary>
        <content type="html"><![CDATA[<p>This article has been created to remind us of one simple thing: HTTP is a stream.</p>
<p>As a practical outcome we can learn how to reduce memory requirements for our services in a typical task: cache warming.</p>
<p>Let's look at the challenge first.</p>
<p>We have a service that must download the data and keep it in memory.
The issue is the JSON document we have to download is 10 times larger than the encoded data.
Therefore we have to increase the memory limit 2-3 times to download it once.
Later on, the service doesn't consume as much memory, so it's a start up cost.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-challenge-cut-down-the-memory-consumption-as-much-as-we-can">The challenge: cut down the memory consumption as much as we can.<a href="https://dennypenta.github.io/mynameis/blog/big-json#the-challenge-cut-down-the-memory-consumption-as-much-as-we-can" class="hash-link" aria-label="Direct link to The challenge: cut down the memory consumption as much as we can." title="Direct link to The challenge: cut down the memory consumption as much as we can.">​</a></h3>
<p>Let's get back to the basic of network communication.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>We skip TLS termination for the sake of simplicity.</p></div></div>
<p>There is a great book that explains it very well: <a href="https://hpbn.co/building-blocks-of-tcp/#slow-start" target="_blank" rel="noopener noreferrer">https://hpbn.co/building-blocks-of-tcp/#slow-start</a></p>
<p><img loading="lazy" alt="img" src="https://dennypenta.github.io/mynameis/assets/images/syn-b9d07c0830813f49866fd02e5f6dcacb.svg" width="343" height="171" class="img_ev3q"></p>
<p>Just a litle picture to remind us how a connection starts: we do a handshake with the service.</p>
<p>Then we can start exchanging data.
Typical API responses are at most ~50kb.</p>
<p>But what if you want to warm a cache? How much can it be?
It can be a lot, around tens of megabytes.
In my example, we take 250mb.</p>
<p>How does the server send such data?</p>
<p><img loading="lazy" alt="img" src="https://dennypenta.github.io/mynameis/assets/images/congestion-d6e58562593cc5752c5bc8b39ab87735.svg" width="283" height="142" class="img_ev3q"></p>
<p>Slowly, packet by packet.</p>
<p>The server tries to understand your throughput. The protocol itself rarely provides an accurate value of a packet size, so by relying on the imperical latency, it tunes the packet size little by little.
It needs to send a lot of packets to transfer a really big response.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-ways-to-do-it">3 Ways to do it<a href="https://dennypenta.github.io/mynameis/blog/big-json#3-ways-to-do-it" class="hash-link" aria-label="Direct link to 3 Ways to do it" title="Direct link to 3 Ways to do it">​</a></h3>
<p>Below we will consider 3 approaches to solve this task.
There is no such thing as the only right solution; all of them are fine as long as you understand the costs and risks well enough, and we are gonna cover them.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="first-brute-force-solution">First, Brute Force solution.<a href="https://dennypenta.github.io/mynameis/blog/big-json#first-brute-force-solution" class="hash-link" aria-label="Direct link to First, Brute Force solution." title="Direct link to First, Brute Force solution.">​</a></h3>
<div class="theme-admonition theme-admonition-warning admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>warning</div><div class="admonitionContent_BuS1"><p>If you want to reproduce an example make sure to untar server/json.tar.gz; it must contain the f.json file since GitHub has a limit of up to 100mb for a file.</p></div></div>
<p>You can imagine how the simplest Go HTTP client can implement it or just look at the code.</p>
<p><a href="https://github.com/dennypenta/http-response-lab/blob/543510947c0b19dbc0097adf403ae5cd6954c1cc/client/main.go" target="_blank" rel="noopener noreferrer">Link</a></p>
<p>The implementation is straight forward: it sends a request, gets a response, reads, marhsals it into a defined structure, holds it in the memory and ready to serve it further.</p>
<p>And here is the pprof output:</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Showing nodes accounting for 229.48MB, 100% of 229.48MB total</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      flat  flat%   sum%        cum   cum%</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  229.48MB   100%   100%   229.48MB   100%  io.ReadAll</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         0     0%   100%   229.48MB   100%  main.main</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         0     0%   100%   229.48MB   100%  runtime.main</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Yes, it's not real win, with huge memory consumption, but it works ok.</p>
<p>We see all the memory consumed on reading the HTTP stream.</p>
<p>Or you might say, "What a noob, you must use <code>json.Decoder</code>" so as to let the decoder work with the HTTP pipe closer.</p>
<p>And it's pretty much the same, in my example, even worse.
<a href="https://github.com/dennypenta/http-response-lab/blob/b6ee7fcfd69fdffad844eb6a3d324d2fe3040985/client/main.go" target="_blank" rel="noopener noreferrer">Link</a> to code with Decoder</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Showing nodes accounting for 384MB, 100% of 384MB total</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      flat  flat%   sum%        cum   cum%</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     384MB   100%   100%      384MB   100%  encoding/json.(*Decoder).refill</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         0     0%   100%      384MB   100%  encoding/json.(*Decoder).Decode</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         0     0%   100%      384MB   100%  encoding/json.(*Decoder).readValue</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         0     0%   100%      384MB   100%  main.main</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         0     0%   100%      384MB   100%  runtime.main</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To recall why let's dig a little into the json/encoding library <a href="https://cs.opensource.google/go/go/+/refs/tags/go1.22.3:src/encoding/json/stream.go;l=49" target="_blank" rel="noopener noreferrer">implementation</a>.</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">dec </span><span class="token operator">*</span><span class="token plain">Decoder</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">Decode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">v any</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">error</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> dec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">err </span><span class="token operator">!=</span><span class="token plain"> </span><span class="token boolean">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> dec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">err</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> err </span><span class="token operator">:=</span><span class="token plain"> dec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">tokenPrepareForDecode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> err </span><span class="token operator">!=</span><span class="token plain"> </span><span class="token boolean">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> err</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token operator">!</span><span class="token plain">dec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">tokenValueAllowed</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token operator">&amp;</span><span class="token plain">SyntaxError</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">msg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"not at beginning of value"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> Offset</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> dec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">InputOffset</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// Read whole value into buffer.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> err </span><span class="token operator">:=</span><span class="token plain"> dec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">readValue</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> err </span><span class="token operator">!=</span><span class="token plain"> </span><span class="token boolean">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> err</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	dec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">init</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">dec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">buf</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">dec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">scanp </span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> dec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">scanp</span><span class="token operator">+</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	dec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">scanp </span><span class="token operator">+=</span><span class="token plain"> n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// Don't save err from unmarshal into dec.err:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// the connection is still usable since we read a complete JSON</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// object from it before the error happened.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	err </span><span class="token operator">=</span><span class="token plain"> dec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">unmarshal</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">v</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token comment" style="color:rgb(98, 114, 164)">// fixup token streaming state</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	dec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">tokenValueEnd</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> err</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>It does exactly the same, it calls <code>dec.readValue()</code> first to read all the response and then <code>dec.d.unmarshal</code> to parse it.</p>
<p>And it's ok; the reason is very simple: <strong>encoding/json doesn't know the nature of your data.</strong></p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Libraries like <a href="https://github.com/json-iterator/go" target="_blank" rel="noopener noreferrer">json-iter</a> or <a href="https://github.com/mailru/easyjson" target="_blank" rel="noopener noreferrer">easyjson</a> offer zero improvements in memory consumption.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="second-decode-object-by-object">Second, decode object by object.<a href="https://dennypenta.github.io/mynameis/blog/big-json#second-decode-object-by-object" class="hash-link" aria-label="Direct link to Second, decode object by object." title="Direct link to Second, decode object by object.">​</a></h3>
<p>Go json library provides a method of the Decoder called <a href="https://pkg.go.dev/encoding/json#Decoder.Token" target="_blank" rel="noopener noreferrer"><code>Token</code></a></p>
<p>This approach, parsing manually token by token, can give us an option to manually parse the json.
A token might be every symbol, such as as open bracket, quote, key, value, etc.
But I found this approach quite complex. Having a deeply nested JSON object makes it very confusing to understand the relation for a given token. An solution could be to hold every key and designated level, but the decision gets worse with duplicated keys on a couple of levels.</p>
<p>That's why I prefer another approach.</p>
<p>There is a well-known problem on LeetCode called "<a href="https://leetcode.com/problems/valid-parentheses/description/" target="_blank" rel="noopener noreferrer">Valid Parentheses</a>"</p>
<p>We can simply read the beginning of a given object and the end, understanding when the last bracket of the object comes.</p>
<p><a href="https://github.com/dennypenta/http-response-lab/blob/b5890cbb74282416b5adacc92de95f18f7ee766f/client/main.go#L110" target="_blank" rel="noopener noreferrer">Link</a></p>
<p>pprof gives the following output</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">(pprof) top 5</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Showing nodes accounting for 68.56MB, 100% of 68.56MB total</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Showing top 5 nodes out of 10</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      flat  flat%   sum%        cum   cum%</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   27.55MB 40.18% 40.18%    68.56MB   100%  main.decode</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      20MB 29.17% 69.35%       20MB 29.17%  encoding/json.(*decodeState).literalStore</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      20MB 29.17% 98.52%       20MB 29.17%  bufio.NewReaderSize (inline)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    1.01MB  1.48%   100%     1.01MB  1.48%  bufio.(*Scanner).Text (inline)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         0     0%   100%       20MB 29.17%  encoding/json.(*decodeState).object</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Usually, the output varies between 65-80mb.</p>
<p>Such adventages is achieved due to marshalling the json <strong>and</strong> reading the HTTP response at the same time.</p>
<p>Let's get back to the introduction. Such a huge response gives us a stream of HTTP chunks we read step by step until the FIN message comes.
We can't make the HTTP server split every object in the response for us (probably we can, but it brings even more complexity).
Instead, every given chunk window we can ask, "Does it contain a valid json object?"</p>
<p>As soon as a valid object has come, we can marshal it and continue reading the response further <strong>until the next valid JSON object comes</strong>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="third-the-simplest-data-compression">Third, the simplest: data compression.<a href="https://dennypenta.github.io/mynameis/blog/big-json#third-the-simplest-data-compression" class="hash-link" aria-label="Direct link to Third, the simplest: data compression." title="Direct link to Third, the simplest: data compression.">​</a></h3>
<p>It was new to me to discover that the most efficient solution will nott be related to the response handling.</p>
<p><strong>We simply must transfer as little data as we can.</strong></p>
<p>JSON is not the only way to represent the data.
It's easy and human-readable, but sometimes we have to trade it.</p>
<p>There are plenty of formats we can apply:</p>
<ul>
<li>Avro</li>
<li>Tthrift</li>
<li>MessagePack</li>
<li>Gob (Go only)</li>
<li>Protobuf</li>
</ul>
<p>And most likely more I don't even know.</p>
<p>I tried replacing decoding to MessagePack and gave very litle result (zero _(ツ)_/).</p>
<p>The best outcome showed Protobuf.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>We still use HTTP/1.1; we don't use gRPC transport.</p></div></div>
<p>The output from pprof is even better with less effort to implement.
It may vary up to 50mb sometimes.</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">(pprof) top5</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Showing nodes accounting for 30.79MB, 100% of 30.79MB total</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      flat  flat%   sum%        cum   cum%</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   30.79MB   100%   100%    30.79MB   100%  io.ReadAll</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         0     0%   100%    30.79MB   100%  main.decode</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         0     0%   100%    30.79MB   100%  main.main</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         0     0%   100%    30.79MB   100%  runtime.main</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here is the solution: <a href="https://github.com/dennypenta/http-response-lab/blob/main/client/main.go#L14" target="_blank" rel="noopener noreferrer">Link</a></p>
<p>What we can say about Gob?</p>
<p>It offers very specific decoding and is a Go-only implementation, but it doesn't provide any benefit, here is the pprof output</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">(pprof) top5</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Showing nodes accounting for 70.81MB, 100% of 70.81MB total</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Showing top 5 nodes out of 20</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      flat  flat%   sum%        cum   cum%</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   30.53MB 43.12% 43.12%    30.53MB 43.12%  internal/saferio.ReadData</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   28.28MB 39.94% 83.05%    28.28MB 39.94%  reflect.growslice</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      12MB 16.95%   100%       12MB 16.95%  encoding/gob.decString</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         0     0%   100%    70.81MB   100%  encoding/gob.(*Decoder).Decode</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         0     0%   100%    70.81MB   100%  encoding/gob.(*Decoder).DecodeValue</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Perhaps for someone, having schemaless implementation is valuable, so here is the solution <a href="https://github.com/dennypenta/http-response-lab/blob/main/client/main.go#L40" target="_blank" rel="noopener noreferrer">link</a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://dennypenta.github.io/mynameis/blog/big-json#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h3>
<p>I found 2 interesting ideas to me during the investigation.</p>
<ol>
<li>The best, or one of them, solution might be the most obvious, so obvious to one is not to everyone.</li>
<li>It's not hard to implement and dig into fundamentals; some may win from engineering a new bicycle.</li>
</ol>]]></content>
        <author>
            <name>Denis</name>
        </author>
        <category label="software" term="software"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why this page exists]]></title>
        <id>https://dennypenta.github.io/mynameis/blog/why-a-blog</id>
        <link href="https://dennypenta.github.io/mynameis/blog/why-a-blog"/>
        <updated>2023-12-13T21:25:34.000Z</updated>
        <summary type="html"><![CDATA[Blog is a  system to spread ideas across the internet. Shout out about a thing "Look, I have an opinion on that if you care".]]></summary>
        <content type="html"><![CDATA[<p>Blog is a&nbsp; system to spread ideas across the internet. Shout out about a thing "Look, I have an opinion on that if you care".</p>
<p>I have opinion on different things, especially in software. I've been working on it since 2015.</p>
<p>So let's start from reasoning why you might want to own one.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="it-makes-more-than-0-chances-somebody-will-find-it-and-share-your-opinion">It makes more than 0 chances somebody will find it and share your opinion<a href="https://dennypenta.github.io/mynameis/blog/why-a-blog#it-makes-more-than-0-chances-somebody-will-find-it-and-share-your-opinion" class="hash-link" aria-label="Direct link to It makes more than 0 chances somebody will find it and share your opinion" title="Direct link to It makes more than 0 chances somebody will find it and share your opinion">​</a></h2>
<p>Or disagree, it's also fine and in some cases means almost the the same for you.</p>
<p>You get audience.&nbsp;</p>
<p>And it's a big deal.</p>
<p>First, the audience challenges your ideas. It's good to find a person to discuss your ideas. It allows your either find weaknesses in the idea itself, or perhaps your mindset to find crucial vocabulary to express what it means for you, or become even more confident on a topic. After all, it's just a joy to discuss what you have on top of your head.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="more-than-0-chances-your-future-team-knows-you">More than 0 chances your future team knows you<a href="https://dennypenta.github.io/mynameis/blog/why-a-blog#more-than-0-chances-your-future-team-knows-you" class="hash-link" aria-label="Direct link to More than 0 chances your future team knows you" title="Direct link to More than 0 chances your future team knows you">​</a></h2>
<p>It's a well known that having a referral in a company makes hiring easier to everyone. They get plus a point in confidence they hire not a dumbass, you may skip long questionnaire. They refer you not because you are good at contribution, but it's easier to build ubiquitous language in the team when you know each other.</p>
<p>I want to say having written something valuable for others makes you a little more known that you used to be. And if you apply to a new job and they have found it - it bumps your chances a lot.</p>
<p>Im convinced in the idea that not just delivering good result to your company, but telling the best pieces to the others will pay me off later on.</p>
<p>The only thing is under question if we really have built and understood something important for the industry.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="memo-is-good">Memo is good<a href="https://dennypenta.github.io/mynameis/blog/why-a-blog#memo-is-good" class="hash-link" aria-label="Direct link to Memo is good" title="Direct link to Memo is good">​</a></h2>
<p>During software experience I realised the wide range technologies I apply can hardly be stored in my head.</p>
<p>Tools such Obsidian are fancy, but Im not disciplined enough to handle my cloud to store it or just structure them well enough, it doesn't fit me.</p>
<p>So Im going to structure my experience here.</p>
<p>It's not just putting all I have in my memory, but also try structuring all new stuff I have in my head.</p>
<p>For instance, I want to memoize a way to define alerts using terraform. Even though I've done it I have no idea what those queries to an observability provider mean.&nbsp;</p>
<p>What should I do?</p>
<p>Not to fool people. I will figure out in order to explain it to the others. Otherwise the article will be one of the thousands on medium or linkedin.</p>
<p>Eventually I have to push my skill up to give my audience valuable experience shared.</p>
<p>In the same time I get structured my experience and making it better by reading more in order to write a little.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="expressing-better">Expressing better<a href="https://dennypenta.github.io/mynameis/blog/why-a-blog#expressing-better" class="hash-link" aria-label="Direct link to Expressing better" title="Direct link to Expressing better">​</a></h2>
<p>And my personal reason.</p>
<p>Im poor at structuring my speach. If you read it you know how hard it was to catch my ideas. But I fight against it and I believe the blog may make me write more often and amend the way I express myself.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="you-are-ready-what-now">You are ready. what now?<a href="https://dennypenta.github.io/mynameis/blog/why-a-blog#you-are-ready-what-now" class="hash-link" aria-label="Direct link to You are ready. what now?" title="Direct link to You are ready. what now?">​</a></h2>
<p>Ok, let's say you confirmed you have a reason to have a blog.</p>
<p>A couple of hints I want to add.</p>
<p>Platforms like medium blocks people from reading your content without subscription.
And definitely it's not what I want.</p>
<p>I can understand if you want to setup patreon to provide sub only data, but I don't consider such option.&nbsp;
Moreover, the platforms get bigger revenue chunk of your ad and don't do more than google does.</p>
<p>I picked docusaurus because I have full control on codebase, fonts, styles, ads, comments, structuring. And I was lucky enough to find a template I wanted to reuse by <a href="https://takken.io/" target="_blank" rel="noopener noreferrer">takken</a>.</p>
<p>Or you can just clone this <a href="https://github.com/dennypenta/mynameis" target="_blank" rel="noopener noreferrer">project</a>.</p>]]></content>
        <author>
            <name>Denis</name>
        </author>
        <category label="career" term="career"/>
    </entry>
</feed>